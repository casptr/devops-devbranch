@using Foodtruck.Client.QuotationProcess.Helpers;
<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top" Class="mb-10">
    @for (var i = 0; i < Steps.Count; i++)
    {
        int stepIndex = i;

        if (@Steps[stepIndex].Title == null)
            break;

        <MudTimelineItem Color="@GetColor(stepIndex)" Variant="@GetVariant(stepIndex)">
            <ItemDot>
                @if (stepIndex == CurrentStepIndex)
                {
                    <MudIcon Icon="@Icons.Material.Outlined.Circle" />
                }
                else if (stepIndex < CurrentStepIndex || QuotationProcessState.ReachedEnd)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check" />
                }
            </ItemDot>
            <ItemContent>
                <MudText Align="Align.Center" Style="margin-top: -30px;">@Steps[stepIndex].Title</MudText>
            </ItemContent>
        </MudTimelineItem>
    }
    </MudTimeline>

    @code {
    [EditorRequired][Parameter] public int CurrentStepIndex { get; set; }
    [EditorRequired][Parameter] public List<QuotationProcessStep> Steps { get; set; } = default!;
    [Inject] private QuotationProcessState QuotationProcessState { get; set; } = default!;

    public Variant GetVariant(int stepIndex)
    {
        return stepIndex < CurrentStepIndex || (stepIndex > CurrentStepIndex && QuotationProcessState.ReachedEnd) ? Variant.Filled : Variant.Outlined; // Filled if completed
    }

    public Color GetColor(int stepIndex)
    {
        return stepIndex <= CurrentStepIndex || QuotationProcessState.ReachedEnd ? Color.Primary : Color.Default; // Primary color if completed or current step
    }

    protected override void OnInitialized()
    {
        if (Steps == null)
            throw new ArgumentNullException(nameof(Steps), "QuotationProcessTimeline must have steps");

        base.OnInitialized();
    }
}
